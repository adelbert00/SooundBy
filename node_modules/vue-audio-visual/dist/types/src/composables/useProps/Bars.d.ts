export declare const PropsBars: {
    /**
     * prop: 'bar-width'
     * Width of the bar in pixels.
     * Default: 5
     */
    barWidth: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * prop: 'bar-space'
     * Space between bars.
     * Default: 1
     */
    barSpace: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * prop: 'bar-color'
     * Bar fill color. Can be string RGB color or canvas gradients array.
     */
    barColor: {
        type: (StringConstructor | ArrayConstructor)[];
        default: string;
    };
    /**
     * prop: 'caps-height'
     * Create caps on bars with given height in pixels.
     * If zero caps then skip creating bars.
     * Default: 0
     */
    capsHeight: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * prop: 'caps-drop-speed'
     * Caps drop down animation speed.
     * Default: 0.9
     */
    capsDropSpeed: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * prop: 'caps-color'
     * Caps rectangles RGB color.
     */
    capsColor: {
        type: StringConstructor;
        default: string;
    };
    /**
     * prop: 'brick-height'
     * Draw bar as bricks with set height.
     */
    brickHeight: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * prop: 'brick-space'
     * Space between bricks.
     */
    brickSpace: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * prop: 'symmetric'
     * Draw bars symmetric to canvas vertical center
     * Default: false
     */
    symmetric: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * prop: 'fft-size'
     * Represents the window size in samples that is used when performing
     * a Fast Fourier Transform (FFT) to get frequency domain data.
     * Must be power of 2 between 2^5 and 2^15
     * Default: 1024
     */
    fftSize: {
        type: NumberConstructor;
        default: number;
    };
    src: {
        type: StringConstructor;
        default: null;
    };
    audioControls: {
        type: BooleanConstructor;
        default: boolean;
    };
    corsAnonym: {
        type: BooleanConstructor;
        default: boolean;
    };
    canvWidth: {
        type: NumberConstructor;
        default: number;
    };
    canvHeight: {
        type: NumberConstructor;
        default: number;
    };
    canvFillColor: {
        type: (StringConstructor | ArrayConstructor)[];
        default: string;
    };
    placeholder: {
        type: BooleanConstructor;
        default: boolean;
    };
};
export declare type PropsBarsType = typeof PropsBars;
export declare function makeBarsProps(): PropsBarsType;
export declare class Bars {
    barColor: string | string[];
    barSpace: number;
    barWidth: number;
    brickHeight: number;
    brickSpace: number;
    canvFillColor: string | string[];
    canvHeight: number;
    canvWidth: number;
    capsColor: string;
    capsDropSpeed: number;
    capsHeight: number;
    fftSize: number;
    frqBits: number;
    placeholder: boolean;
    symmetric: boolean;
    constructor(p: PropsBarsType);
    alignSym(barHeight: number): number;
}
