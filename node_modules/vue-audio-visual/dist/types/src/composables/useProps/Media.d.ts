export declare const PropsMedia: {
    /**
     * prop: 'media'
     * MediaStream object for visualisation. Can be delivered by
     * Web Audio API functions like getUserMedia or RTCPeerConnection
     */
    media: {
        type: ObjectConstructor;
        required: boolean;
        default: null;
    };
    /**
     * prop: 'canv-width'
     * Canvas element width. Default depends on type
     * vbar: 50, frequ: 300, wform: 200, circle: 80
     */
    canvWidth: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * prop: 'canv-class'
     * Canvas element css class name.
     */
    canvClass: {
        type: StringConstructor;
        default: string;
    };
    /**
     * prop: 'canv-height'
     * Canvas element height. Default value depends on type.
     * vbar: 20, frequ: 80, wform: 40, circle: 80
     */
    canvHeight: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * prop: 'canv-fill-color'
     * Canvas fill background RGB color.
     * Default is transparent.
     */
    canvFillColor: {
        type: StringConstructor;
        default: string;
    };
    /**
     * prop: 'circle-gradient'
     * Gradient array for circle type
     * Default: [[0, 'palegreen'], [0.3, 'lime'], [0.7, 'limegreen'], [1, 'green']]
     */
    circleGradient: {
        type: ArrayConstructor;
        default: (string | number)[][];
    };
    /**
     * prop: 'fft-size'
     * Represents the window size in samples that is used when performing
     * a Fast Fourier Transform (FFT) to get frequency domain data.
     * Must be power of 2 between 2^5 and 2^15
     * Default: 8192 for 'wform' 1024 for 'freq'
     */
    fftSize: {
        type: NumberConstructor;
    };
    /**
     * prop: 'type'
     * Type of visualisation.
     * circle - circle form
     * frequ  - using byte frequency data
     * wform  - using byte time domaine data
     * vbar   - vertical bar
     * wform when not recognized.
     * Default: wform
     */
    type: {
        type: StringConstructor;
        default: string;
    };
    /**
     * prop: 'frequ-lnum'
     * Vertical lines number for frequ type.
     * Default: 60
     */
    frequLnum: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * prop: 'frequ-line-cap'
     * Draw line with rounded end caps.
     * Default: false
     */
    frequLineCap: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * prop: 'frequ-direction'
     * Direction for frequency visualization.
     * lr - from left to right
     * mo - from middle out
     * lr when not recognized.
     * Default: lr
     */
    frequDirection: {
        type: StringConstructor;
        default: string;
    };
    /**
     * prop: 'line-color'
     * Line color.
     * Default: lime
     */
    lineColor: {
        type: StringConstructor;
        default: string;
    };
    /**
     * prop: 'line-width'
     * Line width.
     * Default: 0.5 for wform and 3 for frequ
     */
    lineWidth: {
        type: NumberConstructor;
    };
    /**
     * prop: 'radius'
     * Circle radius.
     * Default: 4 for circle
     */
    radius: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * prop: 'connect-destination'
     * Analyser to connect to audio context's destination
     * Default: false
     */
    connectDestination: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * 'prop': 'vbar-bg-color'
     * Background canvas color for 'vbar' type
     * Default: '#e1e1e1'
     */
    vbarBgColor: {
        type: StringConstructor;
        default: string;
    };
    /**
     * 'prop': 'vbar-caps'
     * Rounded bars for 'vbar' types
     * Default: true
     */
    vbarCaps: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * 'prop': 'vbar-space'
     * Space between bars in 'vbar' type
     * Default: 1
     */
    vbarSpace: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * 'prop': 'vbar-width'
     * Width of bars in 'vbar' type
     * Default: 4
     */
    vbarWidth: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * 'prop': 'vbar-fill-color'
     * Color of bars in 'vbar' type
     * Default: 'lime'
     */
    vbarFillColor: {
        type: StringConstructor;
        default: string;
    };
    /**
     * 'prop': 'vbar-right-color'
     * Color of bars on right side in 'vbar' type
     * Default: '#c0c0c0'
     */
    vbarRightColor: {
        type: StringConstructor;
        default: string;
    };
};
export declare type PropsMediaType = typeof PropsMedia;
export declare function makeMediaProps(): PropsMediaType;
declare type GradientType = Array<[number, string]>;
export declare class Media {
    canvWidth: number;
    canvHeight: number;
    canvFillColor: string;
    canvClass: string;
    circleGradient: GradientType;
    fftSize: number;
    type: string;
    frequLnum: number;
    frequLineCap: boolean;
    frequDirection: string;
    lineColor: string;
    lineWidth: number;
    radius: number;
    connectDestination: boolean;
    vbarBgColor: string;
    vbarCaps: boolean;
    vbarFillColor: string;
    vbarRightColor: string;
    vbarSpace: number;
    vbarWidth: number;
    constructor(p: PropsMediaType);
    get defaultWidth(): number;
    get defaultHeight(): number;
}
export {};
