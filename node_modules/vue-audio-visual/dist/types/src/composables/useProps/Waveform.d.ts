export declare const PropsWaveform: {
    /**
     * prop: 'canv-width'
     * Canvas element width. Default 500
     */
    canvWidth: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * prop: 'canv-height'
     * Canvas element height. Default 80
     */
    canvHeight: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * prop: 'played-line-width'
     * Waveform line width for played segment of audio
     * Default: 0.5
     */
    playedLineWidth: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * prop: 'played-line-color'
     * Waveform line color for played segment of audio
     * Default: navy
     */
    playedLineColor: {
        type: StringConstructor;
        default: string;
    };
    /**
     * prop: 'noplayed-line-width'
     * Waveform line width for not yet played segment of audio
     * Default: 0.5
     */
    noplayedLineWidth: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * prop: 'noplayed-line-color'
     * Waveform line color for not yet played segment of audio
     * Default: lime
     */
    noplayedLineColor: {
        type: StringConstructor;
        default: string;
    };
    /**
     * prop: 'playtime'
     * Display played time next to progress slider.
     * Default: true
     */
    playtime: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * prop: 'playtime-with-ms'
     * Display milliseconds in played when true.
     * For example: 02:55.054
     * Default: true
     */
    playtimeWithMs: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * prop: 'playtime-font-size'
     * Played time print font size in pixels.
     * Default: 12
     */
    playtimeFontSize: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * prop: 'playtime-font-family'
     * Played time print font family.
     * Default: monospace
     */
    playtimeFontFamily: {
        type: StringConstructor;
        default: string;
    };
    /**
     * prop: 'playtime-font-color'
     * Played time print font RGB color string.
     * Default: grey
     */
    playtimeFontColor: {
        type: StringConstructor;
        default: string;
    };
    /**
     * prop: 'playtime-text-bottom'
     * Position playtime text bottom.
     * Default on top.
     * Default: false
     */
    playtimeTextBottom: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * prop: 'playtime-slider'
     * Draw played slider
     * Default: true
     */
    playtimeSlider: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * prop: 'playtime-slider-color'
     * Played slider color
     * Default: red
     */
    playtimeSliderColor: {
        type: StringConstructor;
        default: string;
    };
    /**
     * prop: 'playtime-slider-width'
     * Played slider width
     * Default: 1
     */
    playtimeSliderWidth: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * prop: 'playtime-clickable'
     * Allow click on waveform to change playtime.
     * Default: true
     */
    playtimeClickable: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * prop: 'requester'
     * Allow set a custom requester (axios/fetch) to be used.
     * Default: new fetch instance
     */
    requester: {
        type: FunctionConstructor;
        default: typeof fetch;
    };
    src: {
        type: StringConstructor;
        default: null;
    };
    audioControls: {
        type: BooleanConstructor;
        default: boolean;
    };
    corsAnonym: {
        type: BooleanConstructor;
        default: boolean;
    };
    canvFillColor: {
        type: (StringConstructor | ArrayConstructor)[];
        default: string;
    };
    placeholder: {
        type: BooleanConstructor;
        default: boolean;
    }; /**
     * prop: 'playtime-with-ms'
     * Display milliseconds in played when true.
     * For example: 02:55.054
     * Default: true
     */
};
export declare type PropsWaveformType = typeof PropsWaveform;
export declare function makeWavefromProps(): PropsWaveformType;
export declare class Waveform {
    src: string | null;
    canvWidth: number;
    canvHeight: number;
    canvFillColor: string | string[];
    currentTime: number;
    duration: number;
    playedLineWidth: number;
    playedLineColor: string;
    noplayedLineWidth: number;
    noplayedLineColor: string;
    playtime: boolean;
    playtimeWithMs: boolean;
    playtimeFontSize: number;
    playtimeFontFamily: string;
    playtimeFontColor: string;
    playtimeTextBottom: boolean;
    playtimeSlider: boolean;
    playtimeSliderColor: string;
    playtimeSliderWidth: number;
    playtimeClickable: boolean;
    peaks: [number, number][];
    constructor(p: PropsWaveformType);
    get playX(): number;
    get timePlayed(): string;
    setPeaks(buffer: AudioBuffer): void;
}
