export declare const PropsCircle: {
    /**
     * prop: 'fft-size'
     * Represents the window size in samples that is used when performing
     * a Fast Fourier Transform (FFT) to get frequency domain data.
     * Must be power of 2 between 2^5 and 2^15
     * Default: 1024
     */
    fftSize: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * prop: 'canv-width'
     * Canvas element width. Default 100
     */
    canvWidth: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * prop: 'canv-height'
     * Canvas element height. Default 100
     */
    canvHeight: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * prop: 'radius'
     * Set circle radius. If zero will be calculated from canvas
     * width: (canv-width / 2) * 0.7
     * Default: 0
     */
    radius: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * prop: 'line-width'
     * Frequency bit line width to draw.
     */
    lineWidth: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * prop: 'line-space'
     * Space between lines to draw.
     */
    lineSpace: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * prop: 'outline-color'
     * Outline (contour) style RGB color.
     * Default: #00f
     */
    outlineColor: {
        type: StringConstructor;
        default: string;
    };
    /**
     * prop: 'outline-width'
     * Outline (contour) line width. Float value.
     * Default: 0.3
     */
    outlineWidth: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * prop: 'bar-width'
     * Frequency graph bar width.
     */
    barWidth: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * prop: 'bar-length'
     * Frequency graph bar length.
     * Default is a difference between radius and canvas width.
     */
    barLength: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * prop: 'bar-color'
     * Bar style RGB color or radient gradient when array.
     * Default: [ #FFFFFF, #0000FF ]
     */
    barColor: {
        type: (StringConstructor | ArrayConstructor)[];
        default: string[];
    };
    /**
     * prop: 'progress'
     * Draw play progress meter.
     * Default: false
     */
    progress: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * prop: 'progress-width'
     * Progress meter width.
     * Default: 1
     */
    progressWidth: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * prop: 'progress-color'
     * Progress meter color.
     * Default: 1
     */
    progressColor: {
        type: StringConstructor;
        default: string;
    };
    /**
     * prop: 'progress-clockwise'
     * Progress meter arc draw direction. Default clockwise
     * Default: true
     */
    progressClockwise: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * prop: 'outline-meter-space'
     * Space between outline and progress meter.
     * Default: 2
     */
    outlineMeterSpace: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * prop: 'playtime'
     * Draw playtime text in the center of the circle.
     * Default: false
     */
    playtime: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * prop: 'playtime-font'
     * Played time print font.
     * Default: '14px Monaco'
     */
    playtimeFont: {
        type: StringConstructor;
        default: string;
    };
    /**
     * prop: 'playtime-color'
     * Played time font color.
     * Default: '#00f'
     */
    playtimeColor: {
        type: StringConstructor;
        default: string;
    };
    /**
     * prop: 'rotate-graph'
     * Rotate graph clockwise enable.
     * Default: false
     */
    rotateGraph: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * prop: 'rotate-speed'
     * Rotate graph speed.
     * Default: 0.001
     */
    rotateSpeed: {
        type: NumberConstructor;
        default: number;
    };
    src: {
        type: StringConstructor;
        default: null;
    };
    audioControls: {
        type: BooleanConstructor;
        default: boolean;
    };
    corsAnonym: {
        type: BooleanConstructor;
        default: boolean;
    };
    canvFillColor: {
        type: (StringConstructor | ArrayConstructor)[];
        default: string;
    };
    placeholder: {
        type: BooleanConstructor;
        default: boolean; /**
         * prop: 'outline-width'
         * Outline (contour) line width. Float value.
         * Default: 0.3
         */
    };
};
export declare type PropsCircleType = typeof PropsCircle;
export declare function makeCircleProps(): PropsCircleType;
export declare class Circle {
    barColor: string | string[];
    barLength: number;
    barWidth: number;
    canvFillColor: string | string[];
    canvHeight: number;
    canvWidth: number;
    fftSize: number;
    lineSpace: number;
    lineWidth: number;
    outlineColor: string;
    outlineMeterSpace: number;
    outlineWidth: number;
    placeholder: boolean;
    playtime: boolean;
    playtimeColor: string;
    playtimeFont: string;
    progress: boolean;
    progressClockwise: boolean;
    progressColor: string;
    progressWidth: number;
    radius: number;
    rotateGraph: boolean;
    rotateSpeed: number;
    constructor(p: PropsCircleType);
    get cx(): number;
    get cy(): number;
    get r(): number;
    get arcStep(): number;
    get barLen(): number;
    get angle(): number;
}
